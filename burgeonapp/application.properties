spring.datasource.driver-class-name=org.sqlite.JDBC
spring.datasource.url=jdbc:sqlite:./src/test/resources/chinook.db
spring.datasource.username=
spring.datasource.password=

# Represents the default SQL to use on 'retrieve' data operation
# use @{variable} where variables can be:
#    menu: current menu
#    item: current item
#retrieve-sql=select * from @{item}
retrieve-page-size=9
# the sql snippet to apply to paging... this is for sqlite
retrieve-paging-snippet=limit ((:pageNumber * :pageSize) + :pageSize) offset (:pageNumber * :pageSize)

# In the demo we have the following tables:
#     albums
#     artists
#     customers
#     employees
#     genres
#     invoice_items
#     invoices
#     media_types
#     playlist_track
#     playlists
#     tracks 
#     sqlite_sequence
#     sqlite_stat1
# In the following rows we exclude sqlite tables and organize the others in 3 main menus...
menus=music,store,options
exclude-tables=sqlite.*
music.include-tables=albums,artists,genres,playlists,tracks
store.include-tables=inv.*,customers
options.include-tables=employees,media_types

music.artists.retrieve-maximize-column=Name

music.genres.retrieve-sql=select name from genres
music.genres.retrieve-maximize-column=Name

# Here we override the sql of 'tracks' item in order to have the textual genre...
music.tracks.retrieve-sql=\
  select t.name, g.name as "genre", t.composer, t.milliseconds, t.unitprice \
    from tracks t \
      inner join genres g on (t.genreID = g.genreID)

# Here we override the sql of 'invoices' item in order to have data ordered by a specific date field in descending order...
store.invoices.retrieve-sql=\
  select * from invoices \
    order by invoicedate desc
